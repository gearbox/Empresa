services:
  app-backend:
    env_file:
      ../.env
    build:
      context: ../
      dockerfile: ./docker/app/Dockerfile
    container_name: app-backend
    hostname: app-backend
    networks:
      - app-network
    ports:
     - "13000:80"
    depends_on:
      app-postgres:
        condition: service_healthy
      app-redis:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "/bin/bash -c 'exec 3<>/dev/tcp/127.0.0.1/80;echo -e \"GET /healthcheck HTTP/1.1\r\nhost: http://localhost\r\nConnection: close\r\n\r\n\" >&3;grep \"HTTP/1.1 200 OK\" <&3'" ]
      interval: 15s
      timeout: 5s
      retries: 5
    restart: always

  app-postgres:
    env_file:
      ../.env
    build:
      context: ../
      dockerfile: ./docker/db/Dockerfile
    container_name: app-postgres
    hostname: app-postgres
    networks:
      - app-network
    ports:
      - "127.0.0.1:5432:5432"
    # volumes:
    #   - ./var/db/postgresql/app:/var/lib/postgresql/data
    # please uncomment next line to enable full PostgreSQL logging
    # it might be very useful for debugging purposes
    # command: ["postgres", "-c", "log_statement=all", "-c", "log_destination=stderr"]
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres", "-d", "postgres" ]
      interval: 15s
      retries: 5
    restart: always

  app-redis:
    image: redis:latest
    container_name: app-redis
    hostname: app-redis
    networks:
      - app-network
    volumes:
      - ./var/db/redis:/data
    command: redis-server
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 15s
      timeout: 30s
      retries: 5
    restart: always

networks:
  app-network:
    driver: bridge