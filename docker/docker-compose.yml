services:
  app-backend:
    environment:
      - UVICORN_WORKERS=${UVICORN_WORKERS}
      - CONTAINER_HOST=${CONTAINER_HOST}
      - CONTAINER_PORT=${CONTAINER_PORT}
      - BIND_HOST_PORT=${BIND_HOST_PORT}
      - BIND_HOST=${BIND_HOST}
      - APP_NAME=${APP_NAME}
      - TOKEN_HEADER_NAME=${TOKEN_HEADER_NAME}
      - TOKEN=${TOKEN}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    env_file:
      - path: ../.env
        required: false
    build:
      context: ../
      dockerfile: ./docker/app/Dockerfile
    container_name: app-backend
    hostname: app-backend
    networks:
      - app-network
    ports:
     - "$BIND_HOST:$BIND_HOST_PORT:$CONTAINER_PORT"
    depends_on:
      app-postgres:
        condition: service_healthy
      app-redis:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "/bin/bash -c 'exec 3<>/dev/tcp/$CONTAINER_HOST/$CONTAINER_PORT;echo -e \"GET /healthcheck HTTP/1.1\r\nhost: http://$CONTAINER_HOST\r\nConnection: close\r\n\r\n\" >&3;grep \"HTTP/1.1 200 OK\" <&3'" ]
      interval: 15s
      timeout: 5s
      retries: 5
    restart: always

  app-postgres:
    environment:
      - BIND_HOST=${BIND_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    env_file:
      - path: ../.env
        required: false
    build:
      context: ../
      dockerfile: ./docker/db/Dockerfile
    container_name: app-postgres
    hostname: app-postgres
    networks:
      - app-network
    ports:
      - "$BIND_HOST:$POSTGRES_PORT:$POSTGRES_PORT"
    volumes:
       - ./var/db/postgresql/app:/var/lib/postgresql/data
    # please uncomment next line to enable full PostgreSQL logging
    # it might be very useful for debugging purposes
    # command: ["postgres", "-c", "log_statement=all", "-c", "log_destination=stderr"]
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres", "-d", "postgres" ]
      interval: 15s
      retries: 5
    restart: always

  app-redis:
    image: redis:latest
    container_name: app-redis
    hostname: app-redis
    networks:
      - app-network
    volumes:
      - ./var/db/redis:/data
    command: redis-server
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 15s
      timeout: 30s
      retries: 5
    restart: always

networks:
  app-network:
    driver: bridge